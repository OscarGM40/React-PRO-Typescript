			SECCION 05 PATRON DE COMPONENTES -COMPOUND COMPONENT PATTERN-

A grosso modo un patrón es una forma de hacer,que si la aplico voy a tener ciertos beneficios(ejemplo patrón redux).

El patrón compound component pattern me ayuda a crear un componente y dentro de ese componente esperar ciertos componentes hijos(es como un HOC,pero no es exactamente eso).Lo que Fernando quiere mostrar es que puedo meter dentro de un componente otro componente y dentro de ese componente que ya esta dentro del primero meter otro,etc(anidar componentes) 
Ionic lo usa bastante y casi cualquier libreria de componentes hace lo mismo.
No es el favorito de Fernando,veremos ventajas y problemas al usarlo.

En esta sección aprenderemos el patrón de construcción de componentes llamado "Compound Component Pattern" el cual es muy usado por Material UI, ionic y muchos otros que trabajan con componentes previamente creados que se pueden anidar entre si mediante HOCs (Higher Order Components)

Puntualmente aprenderemos el patrón y crearemos nuestro propio ejemplo aplicado.

						VIDEO 57 CONTINUACIÓN DEL PROYECTO

NOTA:si quiero usar Module CSS los archivos tienen que llamarse xxx.module.css.Esto es algo de create-react-app y no puede cambiarse.
Descomprimo el zip que proporciona Fernando y dejo todo preparado

				VIDEO 58 COMPONENTE BÁSICO TRADICIONAL

NOTA: puedo imprimir una hoja de estilos siempre que quiera cerciorarme que la estoy referenciando correctamente:

import styles from '../styles/styles.module.css';
console.log(styles);
Debería ver los estilos(más bien la clase con el hash):

Object:
  buttonAdd: "_buttonAdd_1d678_51"
  buttonMinus: "_buttonMinus_1d678_28"
  buttonsContainer: "_buttonsContainer_1d678_22"
  countLabel: "_countLabel_1d678_41"
  productCard: "_productCard_1d678_3"
  productDescription: "_productDescription_1d678_18"
  productImg: "_productImg_1d678_13"

Como siempre usar CSS Modules hará cada clase única mediante un hash

Respecto al componente será una simple imagen con unos botones:
<div className={ styles.productCard } >
      <img src="/coffee-mug.png" alt="coffe-mug" className={ styles.productImg}/>
      {/* <img src={NoImage} alt="no-image" className={ styles.
        productImg}/> */}

        <span className={ styles.productDescription}></span>
       
        <div className={ styles.buttonsContainer}>

          <button className={ styles.buttonMinus }>-</button>
          <div className={ styles.countLabel}> 0 </div>
          <button className={ styles.buttonAdd }>+</button>

        </div>

* Fijate que puedo meter la imagen en una carpeta public y referenciarla con /image.png(el public se sobreentiende).Cualquier cosa que meta en la carpeta public(a la altura de la raíz del proyecto) compilará al build de vite en la raiz también(irá a build/*) con lo que las rutas coincidirán perfectamente.

Fijate como va a controlar que nunca se devuelva un valor negativo con Math.max(value1,value2).Interesante:
  
const increaseBy = (value: number) =>{
    setCounter( prev => Math.max(prev + value,0));
  }
Un botón restará 1 y el otro lo sumará.Tipico contador.

				VIDEO 59 CUSTOM HOOK - USE PRODUCT

Creamos un custom Hook como tarea.Muy sencillo:

export const useProduct = (initialValue: number) => {
  
  const [counter, setCounter] = useState<number>(initialValue);

  const increaseBy = (value: number) => {
    setCounter(prev => Math.max(prev + value, 0));
  }

  return {
    counter,
    increaseBy
  }
}
Recuerda que un custom Hook permite descentralizar lógica dejando el componente mucho más limpio y legible y además reutilizar esa lógica de forma rápida.Es una simple función cuyo nombre comenzará por useXXX y retornará lo que desee,normalmente.

				VIDEO 60 RECIBIR PROPS AL COMPONENTE HIJO

Normalmente no voy a tener un sólo producto,sino varios.Asi que el padre los debería pasar.Veamos como luce las props en el hijo:

interface Product {
  id: number | string;
  title: string;
  img?:string;
}

interface ProductCardProps {
  product: Product;
}

export const ProductCard = ({product}:ProductCardProps) => {

Cada ProductCard va a recibir props.product(mínimo).Perfecto.El padre deberá mandar esa prop pues.
   <ProductCard product={ product }/>

Todo esto funciona perfectamente pero puedo ver dos inconvenientes.Cualquier cambio en el hijo debe informar al padre y además el dev tiene muy poco control,sólo puede mandar el producto(más bien debe).
El dev | usuario no podría cambiar los estilos,o mandar otros atributos,o cambiar el estilo inicial.Aqui es donde entrán diferentes patrones para crear estos componentes.

			VIDEO 61 COMPOUND COMPONENT PATTERN - PRIMEROS PASOS -

El Compound Component Pattern es un patrón de,como su nombre indica,composición de componentes.Un <select> con sus <options> explica muy bien la idea de este patrón:
<select name="cars">
  <option value="volvo">Volvo</option>
  <option value="saab">Saab</option>
  <option value="mercedes">Mercedes</option>
  <option value="audi">Audi</option>
</select>
El usuario puede elegir entre diferentes opciones,permitiendo cambiar el componente.Habrá que implementar varios pasos.Empezaremos creando pequeños componentes en el anterior componente hijo ProductCard:


/* Compound Components Pattern modulariza todo en pequeños componentes */
export const ProductImage = ({img=""}) => {
  return (
     <img src={img || NoImage} alt="Image" className={ styles.productImg}/>
  )
}

/* puedo pasar el type definition con un objeto custom y no crear otra interface, dado que solo es un argumento */
export const ProductTitle = ({title}:{title:string}) => {
  return (<span className={styles.productDescription}>{title}</span>);
}

interface ProductButtonsProps {
  counter:number;
  increaseBy: (value:number) => void;
}

export const ProductButtons = ({counter, increaseBy}:ProductButtonsProps) => {

  return (
    <div className={styles.buttonsContainer}>
      <button className={styles.buttonMinus} onClick={() => increaseBy(-1)}>
        -
      </button>

      <div className={styles.countLabel}> {counter} </div>

      <button className={styles.buttonAdd} onClick={() => increaseBy(+1)}>
        +
      </button>
    </div>
  );
}

Y el componente ahora luciria asi:

export const ProductCard = ({product}:ProductCardProps) => {
   const { counter, increaseBy } = useProduct(0);
  
  return (
    <div className={ styles.productCard } >
      <ProductImage img={product.img}/>
      <ProductTitle title={product.title}/>
      <ProductButtons counter={counter} increaseBy={increaseBy} />
    </div>
  );
};

Obviamente todo funciona perfectamente.Pero esto sólo es el punto inicial,el cual fue modularizar un componente en partes más pequeñas,obviamente siguiendo un objetivo,en este caso hicimos la Image,el Title y la zona de Botones,pero podrian ser otros.

NOTA: usar en una <img alt="image"> la palabra image dará un warning de que es redundante usar la palabra image en el alt de una image.

			VIDEO 62 COMPOUND COMPONENT PATTERN - SEGUNDO PASO -

Recuerda que el Compound Component Pattern busca tener un componente padre con una serie de opciones como componentes hijos,igual que la etiqueta html <select> y sus <options>.

Bien,el siguiente paso es llamar al hijo así:
<ProductCard product={ product }>
</ProductCard>
y no llamarlo en una self-closed tag( <xxx />).En el momento que haga esto TS se quejará diciendo que el hijo no recibe los children como props(ya que podría pasarle cualquier cosa dentro).

Este children es de tipo React.ReactElement(o también es de tipo () => JSX.Element):

interface ProductCardProps {
  product: Product;
  children?: React.ReactElement | React.ReactElement []; 
}

IMPORTANTE: childrens son opcionales,y si vinieran puede venir uno o un arreglo de ellos.Fijate que intencionalmente exportamos los componentes en el paso anterior:

El padre quedará asi(falta completar los requerimientos):
<ProductCard product={ product }>
    <ProductImage />
    {/* <ProductTitle /> */}
    {/* <ProductButtons /> */}
 </ProductCard>

Y el hijo quedará asi:

export const ProductCard = ({children, product}:ProductCardProps) => {

  return (
    <div className={ styles.productCard } >
      { children }
    </div>

Obviamente no puedo llamar a <ProductTitle /> sin pasarle un title,pero incurrimos en lo mismo si lo hago.No estoy dando libertad al usuario al pasar las props.
El siguiente paso lógico es ver como compartir toda esta información que es necesaria entre padre e hijo.

				VIDEO 63 UNIFICAR EXPORTACIÓN DE COMPONENTES

Lamentablemente aún no vamos a resolver el problema directamente,sino que Fernando nos va a mostrar otra técnica de hacer lo mismo que el video anterior.

Sería más conveniente poder usar algo como <ProductCard.Image /> o <ProductCard.Title> ,así sé que son hijos de ProductCard de una forma mucho más clara.

Un primer paso sería esto:
En el hijo creo y asigno estas propiedades:
ProductCard.Title = ProductTitle;
ProductCard.Image = ProductImage;
ProductCard.Buttons = ProductButtons;

* y en el padre ya puedo usarlo asi:
 <ProductCard product={ product }>
    <ProductCard.Image />
    <ProductCard.Title />
    <ProductCard.Buttons />
  </ProductCard>

Fernando comenta que debo estandarizar en mi aplicación una de las dos formas,o uso una o uso otra.

				VIDEO 64 COMPOUND COMPONENT PATTERN

Ahora,si,ha llegado el momento de solucionar el paso de información usando este patrón.
NOTA: hay varias maneras de compartir información entre padre e hijo.En este caso necesitamos una que no sea mediante las props.Podriamos usar Redux o el Context API.Usaremos la API Context,ya que ya viene con React.

Realmente es bastante sencillo,lo primero será crearse un Contexto(recuerda que en TS no puedo crearlo con el undefined):

interface ProductContextProps {
  product: Product;
  counter: number;
  increaseBy: (amount: number) => void;
}

const productContext = createContext({} as ProductContextProps);
const { Provider } = productContext;

* Para saber como luce es según el value.Y el hijo ahora será englobado con el HOC <Provider> pasandole en el value lo necesario para que funcione todo(en este caso,el product,el counter y el increaseBy:

 return (
    <Provider value={{
      counter,
      increaseBy,
      product
    }}>

    <div className={ styles.productCard } >
      { children }
    </div>
    </Provider>

Obviamente tengo todo en un archivo y queda muy sucio.Habrá que refactorizar esto.Pero fijate que todo esto se ha echo sólo para que los componentes opcionales no usen props.Interesante:

export const ProductButtons = () => {

  const {counter, increaseBy} = useContext(productContext);

  return (
    <div className={styles.buttonsContainer}>
      <button className={styles.buttonMinus} onClick={() => increaseBy(-1)}>
        -
      </button>

      <div className={styles.countLabel}> {counter} </div>

      <button className={styles.buttonAdd} onClick={() => increaseBy(+1)}>
        +
      </button>
    </div>
  );
}
Al coger todo del store ya no usará props ninguno.Solucionando el fallo que tenimamos.Desde luego es muy interesante y bastante sencillo.

NOTA: una forma más compacta de no usar if/elseif/else es usar varios ||:
En vez de usar esto:
 if (img) {
    imgToShow = img;
  } else if (product.img) {
    imgToShow = product.img;
  } else {
    imgToShow = NoImage;
  }
  return <img src={imgToShow} alt="Image" className={styles.productImg} />;
puedo simplemente usar:
 return <img src={img || product.img || NoImage} alt"Product" />
El operador lógico OR cuando un valor sea false pasará al siguiente y asi hasta que encuentre uno true(NoImage siempre es true)

Y otra forma sería:
const src = img ? img : product.img ?? noImage;

Volviendo al title y la img parece que ha querido dejar todo como opcional:
export const ProductTitle = ({title}:{title?:string}) => {
  const { product  } = useContext(ProductContext);

  return <span className={styles.productDescription}>
    {title ? title : product.title }</span>;
};

Fijate que era en ( {title}:{title? <- aqui) para hacerla opcional.

					VIDEO 65 SEPARANDO LA LÓGICA

Muevo las interfaces al folder interfaces/product.interfaces.ts.Muevo cada pequeño componente a un componente nuevo(pues son un simple componente):

import { useContext } from "react";
import { ProductContext } from "./ProductCard";
import NoImage from "../assets/no-image.jpg";
import styles from "../styles/styles.module.css";

export const ProductImage = ({ img = "" }) => {
  const { product } = useContext(ProductContext);

  return <img src={img || product.img || NoImage} alt="Image" className={styles.productImg} />;
};
Simplemente los creo(ProductImage.tsx,ProductTitle.tsx,...) y arreglo dependencias.
Dado que están todos juntos lo mejor es crear un index.ts y exportar en masa:
export { ProductButtons } from "./ProductButtons";
export { ProductTitle } from "./ProductTitle";
export { ProductImage } from './ProductImage'
export { ProductCard } from "./ProductCard";

IMPORTANTE: en el momento que separe los componentes ya no podré usar esta forma tan abrupta de asignar propiedades,que ya habiamos dicho que estaba incorrecta:

ProductCard.Title = ProductTitle;
ProductCard.Image = ProductImage;
ProductCard.Buttons = ProductButtons;

Me dará un error que no puede acceder a  ProductButtons before initialization.
Lo veremos en la siguiente clase.Además el componente debería quedar limpio,y realizar eso ahi rompe con el concepto de abstracción.

				VIDEO 66 ASIGNAR COMPONENTES A OTRO COMPONENTE

Ya no vamos a realizar nada más en el ProductCard.En su lugar lo vamos a hacer todo en el index.ts recién creado.

En él ya no vamos a exportar a ProductCard directamente,sino que lo vamos a importar y renombrar la importación.

En este punto es muy importante entender que en Javascript todo es un Objeto(a excepción de los primitivos).Asi pues ProductCard es un Objeto,y puedo usar Object.assign(objeto,{funcionalidad a asignar}) para asignarle o expandirle nuevas funcionalidades o propiedades en un objeto que va como segundo argumento del método:

export const ProductCard = Object.assign(ProductCardHOC,{
  Title: ProductTitle,
  Buttons:ProductButtons,
  Image: ProductImage });

IMPORTANTE: fijate que éste último paso obligará a importar también,luego al final quedará todo asi:

import { ProductCard as ProductCardHOC } from "./ProductCard";

import { ProductButtons } from './ProductButtons';
import { ProductTitle } from "./ProductTitle";
import { ProductImage } from './ProductImage';

export { ProductButtons } from "./ProductButtons";
export { ProductTitle } from "./ProductTitle";
export { ProductImage } from './ProductImage'

export const ProductCard = Object.assign(ProductCardHOC, {
  Title:ProductTitle,
  Buttons:ProductButtons,
  Image:ProductImage});


/* exporto por default también,aunque no era necesario */
export default ProductCard;

Si bien han sido varios pasos todo ha sido bastante sencillo.Ahora bien,puedo ver que la interface de ProductCard ha sido inferida por TS,pero,¿que pasa si quisieramos hacerla?:


export interface ProductCardHOCProps {
  ({children,product}: ProductCardProps):ReactElement,
  Title: ({ title }:{ title?: string }) => JSX.Element,
  Image:({ img }: { img?: string }) => JSX.Element,
  Buttons: () => JSX.Element
}
Si bien es un tanto compleja solo era ir copiando y pegando(fijate que declarar opcional una prop asi => prop?:string | undefined le puedo quitar el undefined pues ya le puse el ?.

Ahora ya puedo saber más sobre ProductCard y además no podré incumplir el contrato con la interface:
export const ProductCard:ProductCardHOCProps = Object.assign(ProductCardHOC, {
  Title:ProductTitle,
  Image:ProductImage,
  Buttons:ProductButtons,
});

Dado que terminamos la sección hago el respaldo a GitHub.

			SECCION 6 PATRONES DE COMPONENTES - EXTENSIBLE STYLES -

Esta sección es una continuación de la anterior.El objetivo es darle a otros usuarios o desarrolladores(consumidores) la capacidad de que puedan cambiar la apariencia del componente.

En esta sección aprenderemos a extender la funcionalidad de nuestro componente añadiendo la posibilidad de interpretar clases de CSS y/o estilos en línea (inline styles)

Para lograrlo necesitaremos realizar ciertas modificaciones a nuestras interfaces y componentes, pero al final del día, tendremos una componente personalizable.Increible este React.

				VIDEO 71 CONTINUACIÓN - EXTENSIBLE STYLES -

El extensible styles pattern se asegura que yo pueda pasarle clases o estilos a mis componentes prefabricados y que estos componentes prefabricados puedan interpretar estos estilos.
Hay dos técnicas  que veremos,pasar un className y pasar style={{}}.

NOTA:puedo observar que ahora mismo no lo puedo hacer al estar en TS,pero si podria desde JS:
 <ProductCard.Image className="mokete" /> <- error

					VIDEO 72 CUSTOM CLASSNAME

Empezaremos por el más sencillo,que es className y por los componentes que físicamente importamos,que son estos:
 
 <ProductCard product={ product }>
      <ProductImage />
      <ProductTitle />
      <ProductButtons />
   </ProductCard>

De alguna manera tenemos que poder obtener props.className.De momento está asi:
export const ProductCard = ({ children, product }: ProductCardProps) => {

Fernando sugiere que la interfaz que da tipo a las props es mejor tenerla justo arriba del componente,y seguiré este consejo.Al final quedamos asi:

export interface ProductCardProps {
  product: Product;
  children?: ReactElement | ReactElement[];
  className?: string;
}

export const ProductCard = ({ children, product, className }: ProductCardProps) => {

Y ya podriamos hacer algo como esto:
   <div className={`${styles.productCard} ${className}`}>
        {children}
  </div>
Sin embargo no las estoy pasando a los children,ellos aún siguen con el mismo problema.
NOTA:anteriormente hicimos algo asi:

export interface ProductCardHOCProps {
  ({ children, product }: ProductCardProps ):JSX.Element,
}
Esto es similar a esto:
export interface <name> {
  ():boolean <- una funcion que devuelve un boolean
Y esa función podría tener argumentos:
 ( {name,username}):boolean <- funcion que recibe dos args y retorna un Boolean

				VIDEO 73 CLASSNAME EN EL PRODUCTTITLE Y PRODUCTIMAGE

Fijate que cuando son más de una Fernando sugiere crear una interface:

interface ProductTitleProps {
  className?: string;
  title?: string;
}
export const ProductTitle = ({ title, className }: ProductTitleProps) => {

Y también sugiere no exportarla hasta que no haga falta.Esta puede vivir ahi perfectamente. 

interface ProductImageProps {
  img?: string;
  className?:string;
}

export const ProductImage = ({ img = "", className}:ProductImageProps) => {

IMPORTANTE:fijate que fácil es dar un pequeño padding a una imagen y centrarla:
.myClass {
  padding:10px;
  width: calc(100% - 20px);
  border-radius:10px;
} Todo está en el padding + width: calc(todo el ancho - padding total)

					VIDEO 74 CLASSNAME EN PRODUCT-BUTTONS

Este elemento es un tanto más complejo,pues tiene otros dentro:
  return (
    <div className={styles.buttonsContainer}>
      <button className={styles.buttonMinus} onClick={() => increaseBy(-1)}>
        -
      </button>

      <div className={styles.countLabel}> {counter} </div>

      <button className={styles.buttonAdd} onClick={() => increaseBy(+1)}>
        +
      </button>
    </div>

Tendré que saber para quien va la clase...

NOTA:fijate que para cambiar el color del borde de los botones ya tienen un borde,luego simplemente uso border-color:
.custom-buttons button,
.custom-buttons div
{
  color: white;
  border-color: white;
}
Realmente era igual de sencillo,pero observa que fue muy importante apuntar al elemnto padre de este grupo de etiquetas y ya luego por css voy entrando:
 return (
    <div className={`${styles.buttonsContainer} ${className}`}> <- al contenedor
Si hubiera entrado más no podria estilizar a los ascendentes.

					VIDEO 75 INTERFACES FALTANTES

Fijate que realmente no necesitabamos desestructurar las props aqui:

export interface ProductCardHOCProps {
  ({children,product}: ProductCardProps):ReactElement,
  Title: (props: ProductTitleProps) => JSX.Element,
  Image:( props : ProductImageProps) => JSX.Element,
  Buttons: (props:ProductButtonsProps) => JSX.Element
}
Incluso la primera función tampoco es necesario desestructurar nada,podria usar:
(props:ProductCardProps):ReactElement

Fernando comenta que es buena idea ordenar las propiedades y métodos en ascendente(f1 y > y as),separando primero propiedades y despues métodos.Sea como sea debo empezar a ordenar el código.
Aún nos quedó poder pasar estilos en linea con style,si trato de pasar uno dará error.
NOTA: usar trafce en TS para generar una interfaz+componente.
						
					VIDEO 76 REACT CSS-PROPERTIES

De aqui en adelante es practicamente lo mismo,salvo que en vez de className será style.Fijate que no es de tipo string más,sino que es de tipo React.CSSProperties(esto lo puedo ver como siempre haciendo hover en un style):

Asi pues habrá que ir por cada interfaz agregando este style?:CSSProperties:

export interface ProductCardProps {
  product: Product;
  children?: ReactElement | ReactElement[];
  className?: string;
  style?: React.CSSProperties;
}

NOTA:recuerda que desde la v17 tengo visión sobre el objeto global React en cualquier lado.Puedo usar React.CSSProperties y no usar tantas importaciones.

Mando esta nueva prop:
export const ProductCard = ({ children, product, className,style }: ProductCardProps) => {

Y ahora fijate,de nuevo tendré que decidir donde recibirlo,en este ejemplo usaremos justo el mismo tag que recibe a className para hacer lo mismo pero con style:
      <div 
        className={`${styles.productCard} ${className}`}
        style={style} >
        ...

Lo mismo para todos.Puedo observar que implementar el patrón Extensible Styles pattern es bastante sencillo.
ATAJOS VSCODE: ALT+1 | 2 o 3 cambiar entre pestañas
Dividir archivos: CTRL+<> o CTRL+/
Cambiar entre archivos divididos: CTRL+Number
Recuerda seleccionar con SIFT+CTRL+ArroowKeys 
REcuerda CTRL+f busca en el archivo-  CTRL+H busca y reemplaza en el archivo.Muy útiles CTRL+ H o CTRL+SHIFT+H
CTRL+SHIFT+o va a las variables o funciones(muy útil,tu)
CTRL+SHIFT+. hace lo mismo,pero plegado,es aun mejor
CTRL+P,despues':' para seleccionar linea

Hago el respaldo,dejandolo en una rama extensible-styles y vuelvo a develop.

			SECCION 07 CONTROL PROPS - PATRONES DE COMPONENTES

Este patrón es muy usado,y ya lo he usado sin darme cuenta(controlled components).Cuando en un input le pongo un value y un onChanges ya lo estoy usando.
Al pasar a un componente controlado es la función la que toma el control,y al redibujar React el input,la que le cambiará el valor.
Como su nombre indica Control Props son propiedades de control que permiten a nuestros consumidores saber en que momento cambia y también poder establecer un valor.

En esta sección aprenderemos a darle el control a nuestro usuario o compañero de trabajo sobre las propiedades y estado de nuestro componente, usualmente este patrón es el que se utiliza de manera tradicional en formularios, es decir:

<input
    value={  algún valor de solo lectura }
    onChange={ alguna función que cambia el valor }
/>
Este patrón es el que implementaremos a continuación

			VIDEO 82 PROBLEMA Y NECESIDAD DEL CONTROL DE PROPIEDADES

Vamos a crear otra tarjeta,mucho más pequeña,que simule el carrito de compras.Fijtate que si sumo una unidad en la thumbnail no se refleja en la card principal y viceversa,pero deberían,ya que son dos Card(con diferentes tamaños) apuntando al mismo producto,al fin y al cabo.

Este patrón es lo mismo que cuando un <input value={value} onChange={...}>,pero ahora lo quiero en una Card(en un par de ellas realmente).

Puedo controlar lo que quiera,la cantidad de clicks,la cantidad de artículos,lo que yo quiera que regrese.Necesitaré una función que controle esto.

Muchos componentes previamente configurados y estilizados implementan este patrón

					VIDEO 83 ESTADO DEL CARRITO DE COMPRAS

De alguna manera tenemos que mantener los componentes sincronizados(éste es el problema básicamente).

NOTA:dado que un useState permite albergar cualquier cosa hay que decidir si quiero un objeto o un arreglo.Fernando aclara que es mejor usar un objeto(al estilo de un initialState),y ya dentro cualquier propiedad puede ser un arreglo,otro objeto,incluso una función.Puedo observar que es un acierto esa decisión.

Nuestro shoppingCart va a ser un objeto cuyas llaves van a ser los ids de los productos y ese id apunta a un objeto con el producto y la cantidad del mismo:

  const [shoppingCart, setShoppingCart] = useState({
    '1': { ...product1, count:10},
    '2': { ...product1, count:10},
//    '3': { ...product1, count:0}, // si la count es 0 no va a existir
  });

Mientras count sea 0 no va a ser persistido en el carrito.
NOTA: fijate que el spread va a esparcir las propiedades resultando en 1:{},2:{}.Diferente habría sido usar { {...product},count:10}.Importante ver ...spread contra {...spread} 

Aqui vamos a mezclar varios conceptos interesantes.Lo primero es que el value de as keys de este objeto va a ser el Product + la nueva propiedad count luego:

interface ProductInCart extends Product {
  count: number;
} 
Esto es el value de cada '1','2'.Ahora para tipar el useState vamos a usar 
const [shoppingCart, setShoppingCart] = useState<{ [key:string]:ProductInCart}>

Basicamente esto se traduce como: el tipo es un objecto que tendrá cualquier cantidad de llaves,las cuales devolverán un ProductInCart(es decir que es { "":ProductInCart}
Una vez tipado el state no necesito inicializarlo,pues TS ya sabe como va a lucirObserva la importancia de controlar las data structures.

			VIDEO 84 DISPARAR FUNCION AL CAMBIAR ESTADO

Fijate que el evento en que cambia el estado debe ser el onClick sobre el botón,el cual lo controlo con la función increaseBy que ha su vez controla el setCounter,todo esto lo refactorizamos a un customHook:

export const useProduct = (initialValue: number) => {
  
  const [ counter, setCounter ] = useState(initialValue);

  const increaseBy = (value: number) => {
    setCounter(prev => Math.max(prev + value, 0));
  }

  return {
    counter,
    increaseBy
  }

}

Normalmente la función onChange luce asi:
onChange= { (e) => setCounter(e.target.value) }
UNO: Fijate que en un <input> será un SyntheticEvent de HTMl,si,pero no tiene porque ser un evento de HTML,puede ser cualquier evento.
DOS:despues se llama a una función cualquiera,pasandole args o no.Bien,con esto en mente creamos una simple función y la llamamos en el div del carrito:

 const onProductCountChange = () => {
    console.log("onProductCountChange");
  }

   <div className="shopping-cart">
     <ProductCard
      product={product2}
      className="bg-dark"
      style={{ width: "120px" }}
      onChange={() => onProductCountChange()} 

Fijate que interesante.El onChange da error porque no está definido.Hagamoslo.De momento simplemente va a ser una funcion asi () => void,aunque será más compleja.Y fijate que se la paso al hook como argumento,que es lo que necesitabamos:

export interface ProductCardProps {
  product: Product;
  children?: ReactElement | ReactElement[];
  className?: string;
  style?: CSSProperties;
  onChange?: () => void;
}

export const ProductCard = ({ children, product, className,style,onChange }: ProductCardProps) => {

const { counter, increaseBy } = useProduct(0,onChange);
Obviamente,tengo que recibirlo en el hook,de momento hagamoslo simple:

export const useProduct = (initialValue: number, onChange?:()=>void)

Y llamo a la función cuando cambie el counter:
 const increaseBy = (value: number) => {
    setCounter(prev => Math.max(prev + value, 0));
    onChange && onChange();
  }
NOTA: fijate que la función puede ser null | undefined y debo arrastar hasta aquiel optional operator,simplement comprueba con un && que exista su referencia.

Resumen:defino una funcion custom donde quiera,la mando a donde necesite,y la llamo.En TS habrá que tener cuidado con los types.
Al final quedó así:
      {products.map((product) => (
          <ProductCard
            key={product.id}
            product={product}
            className="bg-dark"
            onChange={onProductCountChange}
          >
            <ProductImage className="custom-image" />
            <ProductTitle className="text-white text-custom" />
            <ProductButtons className="custom-buttons" />
          </ProductCard>
        ))}

        <div className="shopping-cart">
          {products.map((product) => (
            <ProductCard
              key={product.id}
              product={product}
              className="bg-dark"
              style={{ width: "120px" }}
              onChange={onProductCountChange}
            >
              <ProductImage className="custom-image" />
              <ProductButtons className="custom-buttons" />
            </ProductCard>
          ))}
        </div>

Fijate que necesito varias cosas,necesito saber que articulo llama a la función y la cantidad.Pero todos estan enlazados a la misma función.Genial.

				VIDEO 85 EMITIR ARGUMENTOS EN NUESTRO EVENTO

Dado que necesitaremos argumentos no puedo usar 'point-free style'Además,vamos a emitir más de un dato.Habrá que tiparla:

 onChange?: (product:Product,count:number) => void; <- recuerda que dos argumentos ya es mejor usar una interfaz

export interface onChangeArgs {
  product: Product;
  count: number;
}

Asi que desde ya es de tipo onChange?:(args:onChangeArgs)=>void.Además,de nuevo,el hook va a recibir varios argumentos,asi que mejor usamos un objeto(fijate que también vamos a mandar el producto:

export const ProductCard = ({ children, product, className,style,onChange }: ProductCardProps) => {

  const { counter, increaseBy } = useProduct({
    product,
    onChange,
    initialValue:0,
    });


interface useProductArgs {
  product: Product;
  onChange?: (args: onChangeArgs) => void;
  initialValue:number
}

Obviamente esto ya no va a funcionar:
  onChange && onChange();
onChange: (args: onChangeArgs) => void
Expected 1 arguments, but got 0.ts(2554)
Nos falta el objeto args de arriba

  const increaseBy = (value: number) => {
    const newValue = Math.max(counter+value,0)
    setCounter(newValue);

    onChange && onChange({
      product,
      count: newValue
    });
  }
Desde ahora cuando incremente el contador vamos a actualizar el estado y si la función existe la emito con esos valores.Obviamente ahora tendremos que recibir bien los dos argumentos:
  
const onProductCountChange = (evento:any) => {
    console.log(evento);
  };

  onChange={ (evento) => onProductCountChange(evento)}

Y obviamente mucho mejor si desestructuro:
 const onProductCountChange = ({count,product}:{count:number,product:Product}) => {
    console.log("onProductCountChange", {count,product});
  };

Genial.Fijate que de nuevo puedo volver a usar programación tácita o point free-style.
NOTA: Pero... pero el objetivo aquí es hacer uso de esta estrategia para crear componentes que no saben si vivieran con Redux o Context... imagina que estás creando tu paquete reutilizable para varios proyectos en React, y tu empresa necesita usar esos componentes en multiples aplicaciones... unos usarán redux, otros context, otros mediante props... pero el comportamiento de tus componentes en ese paquete no deperían depender de componentes externos para funcionar (a menos que explícitamente sea una dependencia de los mismos)



La idea no es que esto reemplace Redux, no... la idea es que aprendamos como estructurar componentes de diferentes formas... puede que este patrón sea complicado y poco a poco lo seguiremos elevando hasta llevarlo a un paquete desplegable a NPM, te aconsejaría que vuelvas a ver el video otra vez y otra vez hasta que tenga esto un poco más de sentido.

					VIDEO 86 CREAR CARRITO DE COMPRAS






