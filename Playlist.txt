						PLAYLIST REACT + TYPESCRIPT FERNANDO HERRERA 

Source: https://www.youtube.com/watch?v=dNxaP_BTtwQ&list=PLCKuOXG0bPi26-eawizqyLOgM7j66H_4M

Usar TypesScript en vez de React me va a ayudar con el uso correcto de mis componentes,va a ser más fácil de leer el código escrito por otras personas ya que todo va a tener un tipado estricto,lo cual tiene muchas ventajas.

Empiezo creando un proyecto con sintaxis npx create-react-app <nombre> --template typescript.Recuerda que no puedo usar CamelCase.Si da problemas usar npx create-react-app@latest.
Puedo usar --template clean-cra

NOTA: fijate como debo usar la keyword class en el index.html de la app de React,ya que estoy fuera de React(body class="container bg-dark text-white").

					VIDEO 02 HOOK USE STATE WITH TYPESCRIPT

 Puedo ver que al usar TypesScript en cuanto vaya a usar un argumento en una función se me va a pedir que especifique el tipo de cada argumento.Genial.

 const incrementar = (number:number = 0) => {
    setCounter( counter + number );
  };
No podré dejarlo sin tipar,como en JS.

Hagamos algo un poco más complejo.Fijate que React en un useState vacío por defecto siempre asigna el valor de undefined:

const [ user, setUser ] = useState() <- user(que es el getter) es de tipo undefined.
Asi que no voy a poder hacer esto:

const login = () => {
  setUser({
    uid:'fdsf',
    name:'Fernando'
  })

Porqué?Porque no podré asignar un object de tipo {uid:string;name:strind} a un undefined,ya que son tipos diferentes.Aqui veo como TS me vuelve a ayudar.El error en concreto es éste:
Argument of type '{ uid: string; username: string; }' is not assignable to parameter of type 'SetStateAction<undefined>'. <- estaba claro,asin -_-

* IMPORTANTE: fijate que useState<undefined> realmente es de tipo genérico,es decir,me va a aceptar un genérico!.Esto es la clave de todo

Lógicamente,aqui es dónde tendré que crear una clase o una interfaz.Dado que no necesito una clase aún,mejor usar una interfaz que compila a 0 bytes.Obviamente el lugar donde usarla está bien claro:

interface User {
  uid: number;
  name: string;
}

const [ user,setUser ] = useState<User>();

NOTA:perfectamente puedo usar un valor por defecto a ese User en el hook,claro que hay que satisfacer la interfaz,como siempre

 const [user, setUser] = useState<User>({
    uid: "",
    name: ""
  });
Fijate que en TS puedo castear con 'as <Type>'.Ejemplo {} as User.Puedo ver que Typescript es muy útil para detección de errores,etc...Debería tratar de usarlo siempre.

			VIDEO 03 HOOK USE EFFECT WITH TYPESCRIPT IN REACT







