						PLAYLIST REACT + TYPESCRIPT FERNANDO HERRERA 

Source: https://www.youtube.com/watch?v=dNxaP_BTtwQ&list=PLCKuOXG0bPi26-eawizqyLOgM7j66H_4M

Usar TypesScript en vez de React me va a ayudar con el uso correcto de mis componentes,va a ser más fácil de leer el código escrito por otras personas ya que todo va a tener un tipado estricto,lo cual tiene muchas ventajas.

Empiezo creando un proyecto con sintaxis npx create-react-app <nombre> --template typescript.Recuerda que no puedo usar CamelCase.Si da problemas usar npx create-react-app@latest.
Puedo usar --template clean-cra para un proyecto más limpio

NOTA: fijate como debo usar el atributo class y no className en el index.html exterior a la app de React,ya que estoy fuera de React(body class="container bg-dark text-white").Lógicamente,si usara className alli no lo entendiría el browser.

					VIDEO 02 HOOK USE STATE WITH TYPESCRIPT

 Puedo ver que al usar TypeScript en cuanto vaya a usar un argumento en cualquier función dentro de mi código se me va a pedir que especifique el tipo de cada argumento,indendientemente de si estoy en un hook o no.Genial.

 const incrementar = (number:number = 0) => {
    setCounter( counter + number );
  };
No podré dejarlo sin tipar,como en JS.

Hagamos algo un poco más complejo.Fijate que React en un useState vacío por defecto siempre asigna el valor de undefined:

const [ user, setUser ] = useState() <- user(que es el getter) es de tipo undefined.
Asi que no voy a poder hacer esto:

const login = () => {
  setUser({
    uid:'fdsf',
    name:'Fernando'
  })

Porqué? Porque no podré asignar un object de tipo {uid:string;name:strind} a un undefined,ya que son tipos diferentes.Aqui veo como TS me vuelve a ayudar.El error en concreto es éste:
Argument of type '{ uid: string; username: string; }' is not assignable to parameter of type 'SetStateAction<undefined>'. <- estaba claro,asin -_-

* IMPORTANTE: fijate que useState<undefined> realmente era de tipo genérico,es decir,me va a aceptar un genérico!.Esto es la clave de todo

Lógicamente,aqui es dónde tendré que crear una clase o una interfaz.Dado que no necesito una clase para simplemente tipar,mejor usar una interfaz que compila a 0 bytes.Obviamente el lugar donde usarla está bien claro:

interface User {
  uid: number;
  name: string;
}

const [ user,setUser ] = useState<User>();

NOTA:perfectamente puedo usar un valor por defecto a ese User en el hook,claro que hay que satisfacer la interfaz,como siempre

 const [user, setUser] = useState<User>({
    uid: "",
    name: ""
  });
Fijate que en TS puedo castear con 'as <Type>'.Ejemplo {} as User.Puedo ver que Typescript es muy útil para detección de errores,etc...Debería tratar de usarlo siempre.

			VIDEO 03 HOOKS USE EFFECT + USE REF WITH TYPESCRIPT

En este ejercicio vamos a crear un simple Contador.En un efecto meto la función setInterval:

useEffect( () => {
    const interval = setInterval(() => {
      setSegundos(segundos + 1)
    }
    , 789)
    return () => {
      clearInterval(interval)
    }
  }, [segundos])

Puede parecer que está correcto,pero realmente está creando un montón de Listeners,pues ha pedido 'segundos' como dependencia,y si que cambia.

Una solución es meter un callback dentro del setter del useState:
setSegundos( s => s +1)
NOTA: cuando uso una callback el primer valor que emite ese setter es el previos state,y no me pide la dependencia.Fijate que esto es básico para evitar la dependencia 'segundos'.Definitivamente es una mejora

NOTA: puedo ver que a la hora de mandar props no puedo mandarlas sin tiparlas en el componente hijo que las reciba previamente.Esto cambia de JS,donde no necesito hacerlo:
  useEffect( () => {
    const interval = setInterval(() => 
      setSegundos(s => s + 1)
    , 1000)
    return () => {
      clearInterval(interval)
    }
  }, [])
* Ya no me pide una dependencia tan dinámica.Definitivamente es una mejora increíble.

					PASAR PROPS EN TS+REACT

Puedo ver que si intento parsar una prop a un hijo simplemente TS me dará un error
  <TimerHijo milisegundos={milisegundos}/> <- por sí solo es un error:

* Tengo que darle una type annotation en el hijo
 const TimerHijo = (args:any) => {...}

Esto quita el error,sin embargo no se debe usar any,pues,¿como śe que puede acceder a args.milisegundos?.Ts no lo sabe.La solución es usar un type en ese file:

type TimerHijoArgs = {
  milisegundos:number
}

la keyword type se usa para definir un tipo que sólo voy a usar en ese archivo.Usualmente se pone arriba del componente,aunque también puede ir abajo.
Fijate que se define como un object literal.Puedo usar cuantos quiera.Lógicamente,args ya no será de tipo any:

export const TimerHijo = ( args: TimerHijoArgs ) => ... 

Genial.Además fijate que puedo agregar incluso propiedades opcionales,y no mandarlas como props desde el padre:

type TimerHijoArgs = {
  milisegundos: number;
  segundos?:number;
}
Si la pusiera obligatoria tengo que mandarla!.Y con todo esto ya puedo desestructurar las props que recibe un componente en TS.Fijate que antes de usar type no puedo desestructurar en TYPESCRIPT!:

const Timer = ( { milisegundos}:TimerHijoArgs ) => ...

En cuanto al interval,si hago hover sobre él veré que retorna un NodeJs.Timeout,y esto tengo visión sobre él en React.Para mantener la referencia al setInterval vamos a usar un useRef:

const intervalRef = useRef();

El useRef crea una referencia que no importa cuantas veces se reconstruya el componente,siempre va a ser el mismo puntero en memoria.Fijate que por defecto en TS useRef: React.MutableRefObject<undefined> no sabe que valor va a mantener esa referencia asi que lo pone de undefined.

Es decir sólo puedo asignar un undefined:
intervalRef.current = undefined;
Pero yo quiero asignarle ese interval:
const intervalRef = useRef<NodeJs.Timeout>();

useEffect( () => {
  intervalRef.current = setInterval( () => setSegundos(s => s +1));
  return () => clearInterval(intervalRef.current)
},[])

Es decir que el useRef necesitará saber el type de lo que almacenará.Genial.Fijate como puedo declarar cualquier constante como una referencia y asignarla con xxxx.current a una función,arreglo,etc... 

Esto también nos llevará a que el clearInterval necesita una función por argumento y nuestra ref puede ser o la función o undefined(pues puede que no la haya asignado aún,claro):

const intervalRef: React.MutableRefObject<NodeJS.Timeout | undefined> 

Hay varias formas de arreglar esto,una muy buena es usar un if con el operador '&&':
   return () => {
      intervalRef.current && clearInterval(intervalRef.current)
    }
Si existe el intervalRef.current lo limpia.
Otra forma era usar el operador not nullish(!)
  
  useEffect( () => {
 
    intervalRef.current = setInterval( () => 
      setSegundos(s => s + 1),milisegundos)
 
    return () => {
      intervalRef.current && clearInterval(intervalRef.current)
    }

  }, [milisegundos])

Perfecto.Lo interesante de este ejercicio ha sido entender que hay que usar un type para las props que recibe un componente en TS y que useRef<> usará un tipo genérico,igual que el useState<>.Supongo que todos los hooks lo harán.
Además,recuerda que usar setters con callbacks en un efecto elimina el getter de ese useState como dependencia.
Y puedo declarar cualquier referencia y asignarla con current a cualquier cosa como una función o un arreglo.Esa referencia al puntero nunca cambiará(crea un Singleton)

			VIDEO 04 HOOK USE REDUCER WITH TS+REACT

Primero que nada fijate que puedo usar el operador typeof para indicar a un argumento que es de un tipo concreto(que ya tendré definido):

const initialState = {
  contador: 0,
}

type ContadorActions = 
  | {type: 'incrementar', payload: number}
  | {type: 'decrementar',payload: number}
  | {type: 'reset',payload?: number};

const contadorReducer = (state: typeof initialState,action:ContadorActions) => {}
* Aunque también puedo iniciarlo.En cuanto a las actions debo crearme un type o una interfaz.Normalmente en la documentación lo crean con type

Y suelen usar esta forma tan elegante:
type xxxName = 
| {k:v,k:v} | {k:v} | {k:v,k:v} Genial.Aunque se pueden usar más formas,pero implican operadores nullish o optional:
type ContadorActions = {
  type: 'incrementar' | 'decrementar' | 'reset',
  payload?: number,
} 

Realmente ya tengo todo.Apenas son un par de cambios en la definición de la función pura,usar el operador typeof y crearme un type ó interface:

const contadorReducer = (state: typeof initialState, action:ContadorActions) => {
  switch (action.type) {
    case 'incrementar':
      return {
        ...state,
        contador: state.contador + action.payload
      }
    case 'decrementar':
      return {
        ...state,
        contador: state.contador - action.payload
      }
    case 'reset':
      return {
        ...state,
        contador: 0
      }
    default:
      return {...state}
  }}

Y aplicarlo es igual de sencillo.Claro que ahora tendré tipado:

const ContadorReducer = () => {
  
  const [ contadorState, dispatch ] = useReducer(contadorReducer, initialState);
  
  return (
    <>
     <h2>Contador: {contadorState.contador}</h2> 
     <button className="btn btn-outline-primary"
        onClick={() => dispatch({type:'incrementar', payload: 1})}
     >+1</button>
NOTA: fijate que podría desestructurar incluso dentro del array(no sabía esto):

const [ {contador},dispatch ] = useReducer(...)
return(
  <h2>Contador: {contador} </h2> 
*Nada  me impide desestructurar dentro de un arreglo

				VIDEO 05 CUSTOM HOOKS CON TYPESCRIPT EN REACT

NOTA:puedo agregar al stage de git de varias formas:
git add "*.png" <- agrego todos los png de todo el proyecto
git add *.png <- agrego por extensión en el directorio actual
git add css/ <- agrego una carpeta
git add -A <- agrego todo
git add index.html styles.css <- agrego listando archivos
git add css/*.scss <- agrego dentro de la carpeta css sólo los .scss
git reset *.png <- recupero del stage esos archivos

git log --oneline <- muestra el hash corto en una linea.Básico
git log --oneline --decorate --all --graph <- aun más completo
git status -s -b muestra la rama en la que estoy y además el stage

NOTA: cuando se usa -- es porque viene una palabra,cuando se usa un único dash es porque viene sólo una letra y además las puedo agrupar.Es decir que puedo usar git status -s -b o bien git status -sb.

Claro que escribir y memorizar tantas flags es muy tedioso.
Es mejor crear un alias:

git config --global alias.lg "log --oneline --decorate --all --graph"
La sintaxis es git config --global alias.<name> "comando"
Crear alias es algo básico.Recuerda que puedo listar y editar esta configuración:
git config --global -e <- para editar
git config --global -l <- para listar

Volviendo al video,veamos un pequeño ejemplo de como gestionar un formulario sin usar un custom hook y despues usandolo,y viendo porqué hay que usarlo y cómo es mejor usarlo.
NOTA: recuerda que en Js si estoy tomando un argumento y se lo estoy mandando a una funcion que está interna no hace falta mandarlo explicitamente:

Esta forma:
  onChange={ (ev) => handleChange(ev) } 
y esta otra son lo mismo
  onChange={handleChange}
el argumento que emite el onChange es el que recibirá handleChange.Genial.Acuerdate,asinto.

Bien vayamos al problema.Recuerda que React usa eventos sintéticos,que son como una copia de los eventos de Javascript.Pero esto da igual,TypeScript no va a reconocer un SyntheticEvent como tipo

const handleChange = (event <- de qué tipo es?Necesito saberlo!)
Podría hacer esto,pero estoy usando any..
 const handleChange = (event:any ) => {
    setFormulario({
      ...formulario,
      [event.target.name]: event.target.value
    })
  }
Bien,realmente ya tenemos la respuesta,pues estamos en un evento sintético onChange,que lógicamente en Javascript es un ChangeEvent.Asi que pudiera parecer que esto lo arreglará todo:
const handleChange = (event:ChangeEvent) 

Pero no,porqué?.Porque los eventos son de tipo genérico.Era ChangeEvent<T>.Esto es asi porque puede ser un <select>,puede ser un <input> puede ser un <textarea> ...
Yo tengo dos inputs,que son de clase HTMLInputElement.En cuanto especifique bien todo tendré el tipado correcto
const handleChange = (event:ChangeEvent<HTMLInputElement>) => {
  setFormulario({
    ...formulario,
   [event.target.name]:event.target.value

Y lógicamente puedo desestructurar ese event,viendo un código mucho más elegante
const handleChange = ( {target}: ChangeEvent<HTMLInputElement> ) => {
  const { name, value } = target;
  setFormulario({
    ...formulario,
    [ name ]:value
  )};

Ahora bien,¿qué pasa con el estado inicial del formulario?:

const [ formulario, setFormulario ] = useState({
    nombre: "",
    email: "",
  })
Sería mejor no poner los campos en duro ahi,y hacer algo reusable para cualquier formulario.Recuerda que un customHook no es más que una función que devuelve lo que yo quiera y que puede usar estados,redux,otros hooks,.. en su interior.
Lo importante es que devuelva lo que yo necesito.
Además que puede recibir argumentos.Perfecto.

YA cambiaremos ese tipo any del initialState
export const useForm = ( initialState: any) => {

  const [ formulario, setFormulario ] = useState(initialState);

  const handleChange = ({ target }: ChangeEvent<HTMLInputElement> ) => {
    const { name, value } = target;

    setFormulario({
      ...formulario,
      [name]: value
    })
  }

    return {
      formulario,
      handleChange
    };
}

No tipar el initialState es un problema.No voy a saber qué propiedades puedo usar ,podría establecer cualquiera con ese any:
value={formulario.nevera} <- no dará fallo

Bien,es hora de resolver esto.Realmente ya lo he visto en el useState<T> del segundo video y es que mi customHook debo tiparlo con una interfaz(podría usar typeof o un type):

interface FormData {
  nombre:string;
  email:string;
  edad: number;
}
const { formulario,handleChange } = useForm<FormData>({
  ... <- aqui ya veré todo y veré el error de la propiedad extra,claro.

Sin embargo,ahora tengo el problema de que en el hook no lo he tipado.Con una función normal es bastante sencillo:

export funcion useForm<T> (initialState:T){...} 

pero no queremos dejar de usar nuestras arrow functions.El problema es que con ellas T necesita heredar de algo en particular:

const useForm = <T extends Object>(initialState:T) => {...}  <- ojo que en una arrow funcion la zona izquierda es sólo para el nombre.El genérico va a la derecha.

También puedo extender de varios:

const useForm = <T extends Object | T extends Array>

En nuestro caso con el objeto nos vale,pues es un objeto xd.
Realmente haber echo esto me permite incluso no crear una interfaz y poder pasarle un initialState cualquiera al recibir el hook.Amazing:

  const { formulario, handleChange } = useForm({
    nombre: "",
    email: "",
  });

Desde ahora tengo acceso a formulario.nombre y formulario.email y lo demás dará error.Puedo observar la gran reusabilidad y el desacoplamiento.

Por último,dado que es mi customHook y puedo hacer lo que quiera podría hacer el spread del objeto y desestructurar ya en la primera linea las propiedades que quiera :

  return {
    formulario,
    handleChange,
    ...formulario <- retorno tanto el getter como el spread del getter
  };
}

const { nombre,email,edad, handleChange} = useForm<FormData>...

NOTA: no devuelvas un Arreglo en un customHook,esto hace las posiciones estáticas,si devuelvo un objeto me da igual el orden al desestructurar,como arriba.

				VIDEO 06 USE-CONTEXT CREATE-CONTEXT CONTEXT-PROVIDER

Recuerda que un contexto es un espacio donde almacenar información al que tienen acceso todos los componentes para que no tenga la necesidad de mandar todo por las props.

Bien,fijate que al usar el método createContext en TS ya me da error,porque en Javascript iniciar algo con undefined no da error:

export const TodoContext = createContext(undefined); <- JS no da error

Pero en TS voy a tener que crearle un initialState siempre.

Bien,pasemos al proveedor de información.Recuerda que es un HOC(una función que recibe un componente y devuelve otro):

interface TodoProviderProps  {
  children: JSX.Element | JSX.Element[];
}

export const TodoProvider = ({children}:TodoProviderProps) => {
  return (
   <TodoContext.Provider value={{}}>
      {children}
   </TodoContext.Provider>
    );
}
Recuerda que no puedo pasar un argumento sin tipar.En este caso los children son un elemento JSX ,pero también pueden ser varios.Puedo usar una interfaz o un type:
type props {
  children: JSX.element | JSX.element[]
}
Fijate que esto es obligatorio,ya que si no le paso JSX.element[] no podría hacer esto:

   <TodoProvider>
      <h1>Todo</h1>
      <ul>
        <li>TODO 1</li>
        <li>TODO 2</li>
        <li>TODO 3</li>
      </ul>
    </TodoProvider>

Ya que este HOC TodoProvider recibe un h1 y un ul(luego recibe dos JSX.Element.Obviamente no es una opción no ponerlo.Bien,dado que estamos en TS vamos a crear las interfaces para mostrar como luce un Todo(una tarea) y el TodoState:

export interface Todo {
  id:string;
  desc: string;
  completed: boolean;
}

export interface TodoState {
  todoCount:number;
  todos: Todo[];
  completed: number;
  pending: number;
}

Este paso es fundamental,tengo que tipar cada initialState.Ahora,al declararlo,le asigno la interfaz:
const INITIAL_STATE: TodoState = {
  todoCount: 2,
  todos: [],
  pending: 2,
  completed: 0
}
La integración con VSC es tan grande que si me dejo una propiedad puedo incluso hacer que el IDE la autocomplete.

En cuando al reducer debo recordar que las acciones llevan una sintaxis un tanto especial:

/* recuerda que las actions del reducer llevan esta sintaxis.Fijate que cuando sepa que el payload será un id puedo usar payload: {id:string}.Genial */
type TodoAction = 
 | { type: 'ADD_TODO', payload: Todo }
 | { type: 'TOGGLE_TODO', payload: {id:string} }


/* el state es claro que ya tengo el tipo */
export const todoReducer = (state:TodoState,action:TodoAction):TodoState=> {
  switch(action.type){
    case 'ADD_TODO':
      return {
        ...state,
        todos: [...state.todos, action.payload]
      }
Por lo demás TS ayuda más que perjudica.

Ya puedo terminar de proveer al provider del contexto que estoy creando con este reducer:

export const TodoProvider = ({children}:TodoProviderProps) => {

  const [TodoState,dispatch] = useReducer(todoReducer,INITIAL_STATE);
  
  return (
   <TodoContext.Provider value={{
      TodoState,
      dispatch
   }}>
      {children}
   </TodoContext.Provider>
    );
}

Sin embargo, en el createContext inicial voy a tener problemas,xd.Voy a tener que crearme un type y además engañar a TS con {} as xxxType.
Fijate que esté {} as xxx es como el operador ! ,es decir que le estoy diciendo a a TS que ese Objeto ya será luego de ese tipo,bla,bla,bla...

export type TodoContextProps = {
  todoState: TodoState;
}

export const TodoContext = createContext<TodoContextProps>({} as TodoContextProps);

Ahora yo podré acceder a lo que mandado en el value del provider,pero aún me falta mandar el dispatch.Ya veré como mandarlo,pues de momento da error.

export const TodoList = () => {

  const { todoState } = useContext(TodoContext);
RESUMEN: tengo que tipar los children como JSX.Element, cada action como un literal {type:string,payload:''} y el INITIAL_STATE y cada objeto que use en él también.Poco a poco.Sigamos con el dispatch.

Fijate también que en el createContext no me interesa inicializar el initialState.Puedo dejarlo para más adelante:

export type TodoContextProps = {
  todoState: TodoState;
}
export const TodoContext = createContext<TodoContextProps>({} as TodoContextProps);

Con todo esto me traigo mi state en algun componente para iterar sobre los Todos[].

const { todoState } = useContext(TodoContext);
const { todos } = todoState;
Bien,ya puedo acceder a este context y a su xxxState,asi que itero por los Todos.Pero puedo ver que al crear un TodoItem y mandarle una prop tengo otro problema con TS,ya que está evitando que sea de tipo any:

export const TodoItem = ({todo}) => { <- ya no podré traer una prop sin tipar
  return (
    <div>
    </div>
  )
}

Para evitar este error hay que crearse una interfaz por cada componente que reciba props.Genial:
interface props {
 todo: Todo
}
export const TodoItem = ( {todo} :props ) => {
* Fijate que incluso si llamo a TodoItem sin pasarle como prop a todo me da error(esto hace innecesario los PropTypes?).

 Fijate como ha usado el spread del todo y además lo junta de nuevo en el mismo movimiento al usar los {} es decir que ...variable lo esparce y {...variable} lo esparce y lo junta,quedando como estaba en un primer momento,pero ya he roto la referencia.:

 todos: state.todos.map( ({...todo}) => {

Fijate que Fernando crea un customHook devolviendo lo que quiere de un Context(incluso devuelve propiedades adicionales).Parece una buena idea:

export const useTodos = () => {
  const { todoState, toggleTodo } = useContext(TodoContext);
  const { todos } = todoState;

  return {
    todos,
    pendingTodos:todos.filter(todo => !todo.completed),
    toggleTodo
  }

}
Además que no tengo que importar más que este useHook en vez de las tropecientas importaciones.Comprobar esto.

* IMPORTANTE: siempre debo ver donde usé el HOC provider.En este caso no puedo usar mi hook porque estoy fuera del HOC.No puedo usar el hook antes del <TodoProvider>.Claro que la solución es simple,y es usarlo dentro xd.

export const Todo = () => {

  const { pendingTodos } = useTodos();
  return (
    <TodoProvider>
      <h1>Todo</h1>
      <TodoList />
    </TodoProvider>
  )
}	
Y de momento nada más,debo practicar mucho más con Typescript.Seguir por su curso avanzado en unos días.
	
